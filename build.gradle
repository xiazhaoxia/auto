/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn how to create Gradle builds at https://guides.gradle.org/creating-new-gradle-builds/
 */

apply plugin: 'java'
apply plugin: 'groovy'


def server="slc11apu"
def buildVersion="23088"
def tempSrc="\\\\slc15dze\\debug-env-template\\$buildVersion-debug-server-template"
def jreSrc = "\\\\slcnas529.us.oracle.com\\engfs02\\tools\\jdk1.8\\win32\\jre8.zip"

def buildLocation="C:\\$buildVersion\\siebel"
def javacontainerTarget="$buildLocation\\javacontainer"
def fileStartDebug="C:\\23088_bat"

def debugTools="mydist"




task initConfig{
	
	def readerString ="";
	def gpro=file("mydist\\config.cfg")	
	gpro.withReader('UTF-8') { reader ->
		reader.eachLine {
			if(it.indexOf("=")>-1){
				def config=it.split('=')
				def k=config[0].trim()
				def v=config[1]
				if(k.contains("HOSTNAME")){
					server=v
					println "$server"
				}else if(k.contains("FILESYSTEM_NS")){
					println v
					//println fileTree(v).list()
				}else if(k.contains("BUILD_NUM")){
					buildVersion=v.trim()
					println buildVersion
				}

			}		
		
		}
		
	}


}

task copyWorkAround(type:Copy,dependsOn:"initConfig"){
	if("$buildVersion"=="23088"){		
		from "\\\\slc12ecr.us.oracle.com\\ting\\shared\\dll_23088"
		from "\\\\slc12ecr.us.oracle.com\\ting\\shared"
		include "siebel.war"
		
		into "dest\\$buildVersion"
		doLast{
			println "copy workaround for $buildVersion"
		}
	}
}




task copyJRE(type: Copy,dependsOn:"copyWorkAround") {
	
	if(file("$buildLocation\\jre").exists()){
	}else{
		from zipTree("$jreSrc") 
	    into "dest" 
	    doLast{    	
	    	file("$buildLocation\\jre").mkdir()
	    	copy{
	    		from "dest\\jre"
	    		into "$buildLocation\\jre"
	    	}
	    }
	}
  
}

task unzipJavaContainer(type: Copy,dependsOn:"copyJRE") {
    from zipTree("$buildLocation\\classes\\javacontainer.zip")
    into "dest"
}

def javacontainer="dest\\javacontainer"
def javaContainerSrc="dest\\javacontainer\\javacontainer0"
def siebTarget="dest\\javacontainer\\javacontainer-sieb"
def gtwyTarget="dest\\javacontainer\\javacontainer-gtwy"
def swsmTarget="dest\\javacontainer\\javacontainer-swsm"

task copy1(type:Copy,dependsOn:"unzipJavaContainer"){
	from "$javaContainerSrc"
	into "$siebTarget"
}

task copy2(type:Copy,dependsOn:copy1){
	from "$javaContainerSrc"
	into "$gtwyTarget"
}
task copy3(type:Copy,dependsOn:copy2){
	from "$javaContainerSrc"
	into "$swsmTarget"
}

task copyCert1(type:Copy,dependsOn:copy3){
	from "$tempSrc\\siebelcerts"
	into "$siebTarget\\siebelcerts"	
}

task copyCert2(type:Copy,dependsOn:copyCert1){
	from "$tempSrc\\siebelcerts"
	into "$gtwyTarget\\siebelcerts" 
}

task copyCert3(type:Copy,dependsOn:copyCert2){
	from "$tempSrc\\siebelcerts"
	into "$swsmTarget\\siebelcerts" 	
}

//copy server xml
task copyServerXmlSieb(type:Copy,dependsOn:copyCert3){
	from "$tempSrc\\sieb\\server.xml"
	into "$siebTarget\\conf"
}


task copyServerXmlgtwy(type:Copy,dependsOn:copyServerXmlSieb){
	from "$tempSrc\\gtwy\\server.xml"
	into "$gtwyTarget\\conf"
}

task copyServerXmlswsm(type:Copy,dependsOn:copyServerXmlgtwy){
	from "$tempSrc\\swsm\\server.xml"
	into "$swsmTarget\\conf"
}

task copySiebwar(type:Copy,dependsOn:copyServerXmlswsm,description:"copy Siebel war & properties to javacontainer-sieb"){
	from("$tempSrc\\sieb") {
		exclude "server.xml"
	}	
	into "$siebTarget\\webapps"
}

task copygtwywar(type:Copy,dependsOn:copySiebwar,description:"copy Siebel war to javacontainer-gtwy"){
	from("$tempSrc\\gtwy") {
		exclude "server.xml"
	}	
	into "$gtwyTarget\\webapps"
}

task copyswsmwar(type:Copy,dependsOn:copygtwywar,description:"copy Siebel war to javacontainer-swsm"){
	from("$tempSrc\\swsm") {
		exclude "server.xml"
	}	
	into "$swsmTarget\\webapps"

}

task copywar(type:Copy,dependsOn:"copyswsmwar"){
	println "before $buildVersion"
	if(buildVersion=="23088"){
		println "$buildVersion"
		from ("dest\\23088"){
			include "*.war"
		}
		into "$swsmTarget\\webapps"
	}
}


task copyJavaContainer(dependsOn:copyswsmwar) {	
	//if target folder is readOnly, you should create target folder before copying the file
	try{
		dependsOn "copywar"

		delete file("$javacontainerTarget")
		
		file("$javacontainerTarget").mkdirs()
		copy{
			from "$javacontainer"
			into "$javacontainerTarget"
		}	

		doLast{
			if(fileTree("$javacontainerTarget")){
				println "copy javacontainer successfully"
			}
		}
	}catch(Exception e){
		println e
	}
	
		
}


def sieb="z:\\siebel\\javacontainer\\javacontainer-sieb"
def gtwy="z:\\siebel\\javacontainer\\javacontainer-gtwy"
def swsm="z:\\siebel\\javacontainer\\javacontainer-swsm"
task resetProperty{
	def readerString=""
	def aiString=""
	if(!file("$sieb").exists()){
		println "sieb path doesn't exists"
		return
	}
	if(!file("$gtwy").exists()){
		println "gtwy path doesn't exists"
		return
	}
	if(!file("$swsm").exists()){
		println "swsm path doesn't exists"
		return
	}
	//def keys=["registryhostname=,registryusername=,registrypassword=,TLSGateway=,Gateway="].join("|")
	def gpro=file("$gtwy\\webapps\\gateway.properties")

	def greader=
		gpro.withReader('UTF-8') { reader ->
			reader.eachLine {
				if(it.contains("registryhostname=")){
					it="registryhostname="
				}else if(it.contains("registryusername=")){
					it="registryusername="
				}else if(it.contains("registrypassword=")){
					it="registrypassword="
				}else if(it.contains("TLSGateway=")){
					it="TLSGateway="
				}else if(it.contains("Gateway=")){
					it="Gateway="
				}
				readerString <<= it
				readerString << '\r\n'
			}
			return readerString
		}
	gpro.withWriter('UTF-8'){
		within ->
		within.append(greader)
	}

	def aipro=file("$swsm\\webapps\\applicationinterface.properties")
	def aireader=aipro.withReader('UTF-8') { reader ->
			reader.eachLine {
				if(it.contains("CGHostURI=")){
					it="CGHostURI="
				}else if(it.contains("SWSMProfile=")){
					it="SWSMProfile="
				}
				aiString <<= it
				aiString << '\r\n'
			}
			return aiString
		}
	aipro.withWriter('UTF-8'){
		within ->
		within.append(aireader)
	}
	doLast{
		println "Property files has been reset successfully!"
	}

}


task modifyfiles(dependsOn:"copyJavaContainer"){
	dependsOn "resetProperty"
	dependsOn "modifyns"
	dependsOn "modifysrdat"
	dependsOn "modifybat"
}

task modifyns{
	def aiString=""
	def aipro=file("z:\\siebel\\bin\\w32ud\\nsprime1.bat")
	def aireader=aipro.withReader('UTF-8') { reader ->
			reader.eachLine {
				it=it.replaceAll(/^set NS=(.*)[^:4330]$/) { match ->
					"set NS=localhost:4330"
					
				}
				aiString <<= it
				aiString << '\r\n'
			}
			return aiString
		}
	aipro.withWriter('UTF-8'){
		within ->
		within.append(aireader)
	}
}

task modifysrdat{
	def aiString=""
	def aipro=file("z:\\siebel\\bin\\srvrdefs.dat")
	def aireader=aipro.withReader('UTF-8') { reader ->
			reader.eachLine {
				it=it.replaceAll(/^Param: DSConnectString(.*)=(.*)(.*:4330|slc.*|localhost)/) { match ->
					def v=it.split("=")
					it=v[0]+"="+"$server:4330"
					
				}
				aiString <<= it
				aiString << '\r\n'
			}
			return aiString
		}
	aipro.withWriter('UTF-8'){
		within ->
		within.append(aireader)
	}
}

task modifybat{
	def startApp=file("z:\\siebel\\bin\\w32ud\\startappsrvr.bat")
	//startApp << "@start siebsrvr /g $server:4330 /e Siebel /s slc11apu /u SADMIN /p MSSQL"
	startApp.withWriter('UTF-8') { writer ->
	    writer.write("@start siebsrvr /g $server:4330 /e Siebel /s $server /u SADMIN /p MSSQL")
	}

	def startMgr=file("z:\\siebel\\bin\\w32ud\\startsrvrmgr.bat")
	//startApp << "@start srvrmgr /g slc11apu:4330 /e Siebel /s slc11apu /u SADMIN /p MSSQL"
	startMgr.withWriter('UTF-8') { writer ->
	    writer.write("@start srvrmgr /g $server:4330 /e Siebel /s $server /u SADMIN /p MSSQL")
	}
}




task run(type:Copy,dependsOn:"modifyfiles"){
	file("Z:\\siebel\\bin\\w32ud\\bat").mkdir()
	from "bat"
	into "Z:\\siebel\\bin\\w32ud\\bat"

}






//have not enable the siebel server
task shudownServer(type:Exec){
	workingDir "./bat"
    commandLine 'cmd', '/c', "@start shutdown.bat"
}

task reset{
	dependsOn "shudownServer"
	dependsOn "resetProperty"	

	//delete fileTree("z:\\siebel\\bin\\version-2")	
}


task restart(type:Exec){
	workingDir "./bat"
    commandLine 'cmd', '/c', "@start restart.bat"
  
}


